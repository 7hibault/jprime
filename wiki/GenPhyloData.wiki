#summary GenPhyloData tutorial


=Work in progress!=
Please return soon for non-tentative information.


=!GenPhyloData Tutorial=

JPrIME-!GenPhyloData is a suite of tools to generate realistic synthetic (a.k.a _artificial_ or _simulated_) phylogenetic species trees and gene trees. The models used conform well with the inference tools included in JPrIME, but may also support other popular models. Currently, the suite comprises 3 tools:

  # !HostTreeGen - for generating bifurcating trees from scratch.
  # !GuestTreeGen - for generating bifurcating trees that evolves w.r.t. a given host tree.
  # !BranchRelaxer - for relaxing on the molecular clock assumptions of (2) or (3).

Additionally, as a 4th stage, it should be easy to use an external tool for creating realistic artificial sequences for the host or guest tree leaves (i.e. taxa or genes), for example with the popular [http://tree.bio.ed.ac.uk/software/seqgen/ SeqGen] application.

The tools of !GenPhyloData are described seperately below.

----

==(1) !HostTreeGen==
[http://jprime.googlecode.com/files/HostTreeGen.png]

!HostTreeGen is a tool to generate bifurcating tree topologies according to a birth-death process. The user inputs a time interval over which the process should take place, along with birth and death rates. Lineages which fail to reach the end of the interval are pruned away. There are additional options regarding the desired number of leaves, taxon sampling probability, stem edge, etc.

The general pattern for the tool is thus:
{{{
java -jar jprime-x.y.z.jar HostTreeGen [options] <timespan> <birth rate> <death rate>
}}}
To execute the application over time 10, with a birth rate of 0.3 events per time unit, death rate of 0.1 events per time unit, and at least 3 leaves, type the following:
{{{
java -jar jprime-x.y.z.jar HostTreeGen -min 3 10 0.3 0.1
}}}
You can always show the list of options by typing:
{{{
java -jar jprime-x.y.z.jar HostTreeGen -h
}}}
The produced trees are rooted. You may of course use an external tool to remove the root to obtain unrooted trees.


----

==(2) !GuestTreeGen==
[http://jprime.googlecode.com/files/GuestTreeGen.png]

!GuestTreeGen is a tool to generate bifurcating "guest" trees that evolve over a known "host" tree according to a birth-death-like process. This is particularly well suited for creating realistic artificial gene families in light of a known taxonomy. The user inputs the host tree over which the process should take place, along with duplication, loss, and lateral transfer rates. The host tree must be rooted and bifurcating. Gust tree lineages which fail to reach the leaves of the host tree are pruned away. There are additional options regarding the desired number of leaves, taxon sampling probability, stem edge, etc.

The general pattern for the tool is thus:
{{{
java -jar jprime-x.y.z.jar GuestTreeGen [options] <host tree> <duplication rate> <loss rate> <transfer rate>
}}}
As an example, the following generates a guest tree over a known tree, with a duplicaton rate of 0.2 events per time unit, loss rate of 0.1 events per time unit, transfer rate of 0.05 events per time unit, at least 4 leaves, and at most 20 leaves:
{{{
java -jar jprime-x.y.z.jar GuestTreeGen -min 4 -max 20 "((A:4.0,B:4.0):6.0,C:10.0):5.0;" 0.2 0.1 0.05
}}}
You can always show the list of options by typing:
{{{
java -jar jprime-x.y.z.jar GuestTreeGen -h
}}}


----

==(3) !BranchRelaxer==
[http://jprime.googlecode.com/files/BranchRelaxer.png]

The trees produced in (1) and (2) are ultrametric (_clock-like_). In order to obtain more realistic branch lengths, this application enables relaxing the molecular clock by rescaling the lengths by heterogeneous rates. A number of popular techniques are supported, including:
  * Uncorrelated models for IID rates drawn from gamma, log-normal and other distributions.
  * Rates drawn uniformly (with replacement) from a list of samples. This is convenient to mimic rates from a posterior distribution stemming from an MCMC analysis.
  * Auto-correlated rates in accordance with Thorne-Kishino '98 and some other popular models.

The input tree must be rooted and bifurcating. Currently, models are employed in a "pure" modeling sense, in that rates that concern the edges around the root follow the model without ad hoc constraints.
It is otherwise common to, during inference, introduce root-constraints to avoid over-parametrization.

To execute the application, the general pattern is the following:
{{{
java -jar jprime-x.y.z.jar BranchRelaxer [options] <tree> <model> <arg1> <arg2> <...>
}}}
where `<tree>` refers to either a string with a Newick tree or a file containing a Newick tree.
You can always show the list of supported rate models and options by typing:
{{{
java -jar jprime-x.y.z.jar BranchRelaxer -h
}}}
As an example, the following outputs lengths by applying log-normal IID rates, and outputs the relaxed tree to stdout:
{{{
java -jar jprime-x.y.z.jar BranchRelaxer "(A:0.5,B:0.5):0.3;" IIDLogNormal 0.0 1.0
}}}
If you instead direct output to a file `myfile.tree`, you will also obtain an additional file detailing the settings, etc. named `myfile.tree.info`:
{{{
java -jar jprime-x.y.z.jar BranchRelaxer -o myfile.tree "(A:0.5,B:0.5):0.3;" IIDGamma 2.0 0.5
}}}

It is of course possible to perform multiple rounds of relaxation, should you wish to acquire a combination of models. For instance, you could apply host tree-guided rates first, then relax the lengths further by an IID or auto-correlated process.

----

==(4) Producing sequence data==
If you wish to produce synthetic sequence data for your trees, you may use, e.g., [http://tree.bio.ed.ac.uk/software/seqgen/ SeqGen], which supports a wide range of popular models of molecular sequence evolution for nucleotide, amino acid or codon data. Such programs typically support modelling also indels, gaps, and site rate heterogeneity.