#summary Tutorial for DLTRS and Deleterious

=DLTRS and Deleterious =

[http://jprime.googlecode.com/files/DLTRS.png]

== CONTENTS ==
  # [DLTRS#INTRODUCTION Introduction]
  # [DLTRS#REFERENCES References]
  # [DLTRS#INPUT Input]
  # [DLTRS#OUTPUT Output]
  # [DLTRS#RUNNING Running]
  # [DLTRS#ANALYSIS Analysis]
  # [DLTRS#OPTIONS Options]
  # [DLTRS#EXAMPLES Examples]
  # [DLTRS#FAQ FAQ]

----
----
----


== INTRODUCTION ==

*DLTRS [=the model]* is a phylogenetic model for the evolution of a guest tree (_gene family_) inside a host tree (_species tree_). It models duplication, loss, lateral transfer (LGT) events, and sequence evolution with a relaxed molecular clock. It is strongly related to its sibling model, [DLRS DLRS], but extends the latter by incorporating support for transfer events. However, there are some fairly large differences in how the underlying probabilities are computed, and Deleterious is more computationally demanding than Delirious.

The evolution of the guest tree _G_ over the host tree _S_ can be envisioned as occurring in separate phases:
  # _G_ is created by evolving down _S_ by means of duplication, loss and transfer events according to a birth-death-like process. Lineages branch deterministically at speciations. In case of an LGT, a receiving species lineage contemporary with (but excluding) the donor species lineage is uniformly selected.
  # Using the clock-like times of _G_, relaxed branch lengths are obtained by multiplying each branch timespan with an _iid_ substitution rate according to a suitable distribution.
  # Using _G_ and its branch lengths, sequence evolution occurs over the tree according to a substitution model of choice to produce guest family sequences. Possibly, site rate variation occurs according to a gamma distribution.

Hence the name DLTRS = duplications, losses, transfers, rates & sequence evolution.

*JPrIME-DLTRS [=the software application]*, colloquially known as *Deleterious*, is the Java application corresponding to the DLTRS model, and is used for inferring an unknown guest tree in light of a known and dated host tree and known sequence data for the leaves. The method relies on Bayesian inference using an MCMC framework. Thus, it will yield a posterior distribution of guest tree topologies and remaining parameters.

*Input:*
  * a file with a dated host tree.
  * a file with a multiple sequence alignment (MSA) of guest tree leaf sequences.
  * a file with a simple map relating the guest tree leaves to host tree leaves.

*Output:*
  * a file with samples drawn from the posterior distribution.
  * a supplementary info file with settings, proposal acceptance ratios, etc.

<font color='red'>
*Since so many properties of Deleterious are shared with Delirious, we will often refer to the [DLRS tutorial of the latter] in order to keep information comprehensive and up-to-date. If you want to get started quickly, we suggest that you download and try [DLTRS#EXAMPLES Example 1], which can be found below, and have a look at it while reading through the other parts of the guide.*
</font>

----
----
----


== REFERENCES ==

DLTRS is currently under review.


----
----
----


== INPUT ==

The required input files to Deleterious are exactly the same as for Delirious. Therefore, please consult the [DLRS#INPUT Delirious input tutorial] for details. As mentioned above, these consist of 1) a host tree with divergence times on the Newick format, 2) a multiple sequence alignment on the FASTA format, and 3) a file relating each sequence to each extant taxon.

There is, however, a difference in the way that the host tree is discretized. As with Delirious, the host tree must be clock-like (ultrametric), with time 0 at the leaves and time >0 at the root, and a "stem" with timespan >0. The scale of the dates can be any unit: *they will be rescaled internally prior to running so that the root time is 1.0, and the output will refer to this scaling*, and not the original values. The scale factor is included in the info output file. The algorithm will use a discretization of the host tree based on sub-dividing contemporary "edge generations". The default settings may be changed according to the options shown below.

 
[http://jprime.googlecode.com/files/Deleterious_discretization.png]

----
----
----


== OUTPUT ==

Output is virtually identical to Delirious output, see [DLRS#OUTPUT here]. The only major difference is the inclusion of an additional column for the LGT rate. The accompanying "info file" should be inspected for determining that MCMC mixing is performing adequately.

----
----
----


== RUNNING ==

=== Starting the application===

Deleterious is started as a command-line Java application. It is possible that future versions will come with a graphical user interface, a command-line based environment for managing options, or similarly. However, at the moment, you would start Deleterious by running e.g.:
{{{
java -cp mypath/jprime-X.Y.Z.jar se/cbb/jprime/apps/dltrs/Deleterious [options] <host tree> <msa> <leaf map>
}}}
where the path and version of course refer to your current setup. See also the section on options below. We recommend using Oracle's HotSpot Java Virtual Machines due to their excellent performance, in which case a recommended heap size of 512 MB and a maximum heap size of 1024 MB would be specified with:
{{{
java -cp mypath/jprime-X.Y.Z.jar -Xms512m -Xmx1024m se/cbb/jprime/apps/dltrs/Deleterious [options] <host tree> <msa> <leaf map>
}}}
Note that these options refer to Java's VM itself, and are not options of Deleterious.

As in most MCMC applications, you typically conduct: 1) pilot runs to assess acceptance ratios, mixing, and running time, 2) if required, change tuning parameters to improve mixing, 3) perform the actual runs, often starting 2-4 parallel chains. We refer to the [DLRS#RUNNING section on running Delirious] for more information.



----
----
----

 
== ANALYSIS ==

Analysis is carried out in the same way as with Delirious; please see the corresponding [DLRS#ANALYSIS section] for more details. MCMC chain output consists of a tab-delimited file which can be read with e.g. CRAN R, Matlab, or Octave. Note that under typical settings, Deleterious will output one column more than Delirious, namely the LGT rate. Trees are output as sorted Newick strings, and can easily be counted, analyzed for common clades etc. using external software (or even a shell). As always, one should discard an initial portion of the output as burn-in to make sure analyzed samples have converged to the posterior distribution.

----
----
----


== OPTIONS ==


----
----
----


== EXAMPLES ==


----
----
----


== FAQ ==

Since Deleterious shares most aspects with its sibling application Delirious, we refer to the [DLRS#FAQ FAQ of Delirious] for most issues. There are, however some differences, notably in discretization and running time.

*Q1) What is a reasonable discretization for Deleterious? And what about tree sizes?*

A1) That depends. Deleterious is an advanced and already fairly optimized application, which solves systems of ordinary differential equations and performs sophisticated dynamic programming during MCMC iterations. As such, it is time-consuming, and you will have to strike a balance between speed and precision in terms of discretization density. Note, however, that the discretization is carried out on an edge generation-basis (see the figure above). Therefore, an edge generation typically needs fewer points than an edge in Delirious. Also, since transfer events are supported, Deleterious does not need as many points as Delirious on the stem edge in order to cope with odd trees during tree exploration. Try using the default discretization, and if it is too demanding, decrease the density gradually. You cannot, however, expect to run Deleterious on species trees larger than, say, 20 extant taxa. In that case wou will have to resort to more crude methods. The running time is linear in the number of sequences.

*Q2) LGT events always occur between disjoint donor- and recipient species lineages. What about intra-species transfer?*

A2) This is an interesting question. Such events will appear as duplications in the model. Therefore, the inferred duplication rate will encompass both intra-species transfers and, e.g., tandem duplications, whereas the transfer rate will capture inter-species transfer.