#summary How to get started as a developer (not an end-user).
#labels Phase-Design,Phase-Implementation,Phase-QA

= Getting started developing =

== Installation instructions ==

Below summary refers to Eclipse. Use of NetBeans, etc. should be similar.
The latest verified version is shown within brackets.

  # Download and install _Eclipse_.
  # Download and Install required development tools:
    * Install Maven.
    * Possibly install external Subversion (SVN) client if Subversive not sufficient (see below).
  # Install recommended Eclipse plugins:
    * Java Development Tools, if not already in place.
    * Subversive with SVNKit or similarly, which enables SVN handling from within the IDE.
    * Maven Integration for Eclipse.
  # Go to the SVN Repository Exploring perspective and add the repository. The location, your username and password can be found under the Source page on the wiki.
  # In the Java perspective, add the project as an existing SVN project. You might have to browse for the trunk.
  # Activate Maven for the project.
  # Start coding! (...possibly under a new branch).

== Good to know ==
  * Make sure that only things that should be kept under version control goes into SVN. Dot directories, target directories, external dependencies, etc. should be added to svn:ignore.
  * Builds and dependencies are handled using Maven. Always add additional dependencies using the pom.xml or similarly. Maven is extremely capable.
  * Logging is not handled with the built-in logger, but rather Logback or log4j (not decided yet).
  * Bug tracking is handled using the Issues page here at Google Code.
  * Application parameter parsing can be achieved in (somewhat) GNU style using JCommander.
  * Unit tests and test suites are handled with JUnit. Test reside under the src/test/java folder in a package structure which is aligned with that of the source code.
  * When the need for a new root directory seems necessary, try adhering to the Maven standard directory layout, as other programs may rely on it.