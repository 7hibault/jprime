#summary How to get started as a developer (not an end-user).
#labels Phase-Design,Phase-Implementation,Phase-QA

= Getting started developing =

== Installation instructions ==

Below summary refers to Eclipse. Use of !NetBeans, etc. should be similar.
The latest verified version is shown within brackets.

  # Download and install Eclipse {{{[Helios]}}}.
  # You probably want to set the default encoding to UTF-8 for both "Eclipse -> Preferences -> General -> Workspace" and all text content types under "Eclipse -> Preferences -> General -> Content Types".
  # Download and Install required tools:
    * Install Maven {{{[Maven 2]}}}.
    * Possibly install external Subversion (SVN) client if Subversive not sufficient (see below).
  # Install recommended Eclipse plugins:
    * Java Development Tools, if not already in place {{{[3.6.1]}}}.
    * Subversive with SVNKit or similarly, which enables SVN handling from within the IDE {{{[0.7.9 and 2.2.2]}}}.
    * Maven Integration for Eclipse {{{[0.10.2]}}}.
  # Go to the SVN Repository Exploring perspective and add the repository. The location, your username and password can be found under the Source page on this wiki.
  # In the Java perspective, add the project as an existing SVN project. You might have to browse for the trunk.
  # Under project settings, set the Java version to 1.6.
  # Activate Maven for the project by "Maven -> Enable Dependency Management".
  # Start coding! (...possibly by creating a new branch first!)

== Version control ==
As mentioned, the source code is under version control using Subversion (SVN). Please note that "dot directories", target directories, and similar should not be under version control, i.e. they should be added to svn:ignore.

== Builds ==
Builds are handled using the very competent (and alas complex) framework Maven. In particular, Maven takes care of all external dependencies (see also below). One may build a project JAR file using the Maven JAR plugin.

== File structure ==
The source file structure adheres to the Maven standard directory layout (as a subset thereof). Before adding new root folders, consider using a folder name proposed by this standard. Of particular importance are:
  * src/main/java - where main source code goes. Note that there is a package for applications and tools, but that that these are not separated.
  * src/test/java - where unit tests and test suites go.
  * target - where local builds are kept (not under version control).
  * lib - where non-Mavenized dependencies are kept, see below.

== Dependencies ==
Maven handles all external dependencies (most commonly JAR files). Typically, for a user, true Mavenized dependencies (and sub-dependencies!) are retrieved and stored under the ~/.m2 folder.
When there is a need for a new dependency, do the following:
  # Try searching for it using the interface shown for pom.xml in the source root. If it is found, just add it. Note that work versions (as opposed to proper releases) are often denoted SNAPSHOT.
  # If it does not exist in an open Maven repository, one must use a workaround. Currently, this consists of adding the JAR file to the lib folder in the SVN repository and then adding a system scope mock reference to the JAR in pom.xml (typically without aid of the interface). 

== Testing ==
Unit tests and test suites are handled with JUnit. Tests reside under the src/test/java folder in a package structure  aligned with that of the source code. Maven can be told to run test suites when building.

== Bug tracking ==
Bug tracking is handled using the Issues page here at Google Code.

== Logging ==
Logging is not handled with the built-in logger, but with Logback, which is a successor of log4j.

== Application parameter parsing ==
Parameter parsing can be achieved in (almost) GNU style using the dependency JCommander.